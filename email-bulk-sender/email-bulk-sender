#!/usr/bin/env bash
#
# SPDX-License-Identifier: AGPL-3.0

_bin="$( \
  dirname \
    "$( \
      command \
        -v \
	  "env")")"
_lib="${_bin}/../lib"
_share="${_bin}/../share"
source \
  "${_lib}/libcrash-bash/crash-bash"

_requirements() {
  _check_cmd \
    "msmtp"
  _check_cmd \
    "awk" \
    "gawk"
}

# shellcheck disable=SC2034
_global_variables() {
  send_date=""
  user_email=""
  user_password=""
  smtp_server=""
  smtp_port=""
  email_subject=""
  email_body=""
  recipients_per_email=""
  email_recipients=()
  color=""
  quiet=""
}

_credentials_requirements() {
  if [[ "${_email}" == "" ]]; then
    _msg_error \
      "a sender email must be provided with -e" \
      1
  elif [[ "${_password}" == "" ]]; then
    _password="$( \
      _credentials_get \
      "${_email}")"
  fi
  if [[ "${_email}" != *"@"* ]]; then
    _msg_error \
      "malformed email" \
      1
  fi
}

_credentials_get() {
  local \
    _user="${1}" \
    _username \
    _cfg_dir \
    _cfg \
    _msg=()
  _cfg_dir="${HOME}/.config/$(_get "app" "name")"
  _username="$( \
    echo \
      "${_user}" | \
      sed \
        's/@/_at_/' | \
        sed \
          's/\./_dot_/')"
  _cfg="${_cfg_dir}/${_username}.txt"
  _msg=(
    "an email password must be provided with -k"
    "or it must be written to '${_cfg}'"
  )
  if [[ ! -e "${_cfg}" ]]; then
    _msg_error \
      "${_msg[*]}" \
      1
  fi
  cat \
    "${_cfg}"
}

_email_send() {
  local \
    _user="${1}" \
    _password="${2}" \
    _recipient="${3}" \
    _subject="${4}" \
    _body="${5}" \
    _host="${6}" \
    _port="${7}" \
    _tmp \
    _msmtp_opts=() \
    _domain \
    _starttls="off"
  if [[ "${_port}" == "" ]]; then
    _port=465
  fi
  if [[ "${_host}" == "" ]]; then
    _domain="$( \
      echo \
        "${_user}" | \
        awk \
          -F \
            "@" \
          '{print $2}')"
    _host="smtp.${_domain}"
    if [[ "${_domain}" == "gmail.com" ]]; then
      _port=587
    fi
  fi
  _msmtp_opts+=(
    --auth=on
    --host "${_host}"
    --port "${_port}"
    --user "${_user}"
    --tls=on 
    --tls-starttls="${_starttls}"
    --read-envelope-from
    --read-recipients
    --passwordeval="echo ${_password}"
  )
  _tmp="$( \
    mktemp \
      --suffix=".txt")"
  cat << EOF > ${_tmp}
From: ${_user}
To: ${_recipient}
Subject: ${_subject}

${_body}
EOF
  _msg_info \
    "${_user}: sending '${_subject}' to '${_recipient}'"
  cat \
    "${_tmp}" | \
    msmtp \
      "${_msmtp_opts[@]}"
}

_email_bulk_sender() {
  local \
    _email="${1}" \
    _password="${2}" \
    _host="${3}" \
    _port="${4}" \
    _subject="${5}" \
    _body="${6}" \
    _recipients_per_email="${7}" \
    _recipients=() \
    _recipient
  shift \
    7
  _recipients=(
    "$@"
  )
  _credentials_requirements
  for _recipient \
    in "${_recipients[@]}"; do
    _email_send \
      "${_email}" \
      "${_password}" \
      "${_recipient}" \
      "${_subject}" \
      "${_body}" \
      "${_host}" \
      "${_port}"
  done
}

_set_overrides() {
  _set_override \
    "send" \
    "date" \
    "$(_get_date_human)"
  _set_override \
    "user" \
    "email" \
    ""
  _set_override \
    "user" \
    "password" \
    ""
  _set_override \
    "smtp" \
    "server" \
    ""
  _set_override \
    "smtp" \
    "port" \
    "465"
  _set_override \
    "email" \
    "subject" \
    ""
  _set_override \
    "email" \
    "body" \
    ""
  _set_override \
    "recipients" \
    "per_email" \
    "1"
  if [[ -v override_color ]]; then
    color="${override_color}"
  elif [[ -z "${color}" ]]; then
    color="n"
  fi
  if [[ -v override_quiet ]]; then
    quiet="${override_quiet}"
  elif [[ -z "${quiet}" ]]; then
    quiet="y"
  fi
}

_display_flags() {
  local \
    _flags=(
      "${1}"
    ) \
    _flag
  for _flag \
    in "${_flags[@]}"; do
  _msg_info \
    "                             ${_flag}"
  done
}

# Shows configuration options.
_show_config() {
  _msg_info "${app_name} configuration"
  _msg_info "        Bulk send at date:   $(_get "send" "date")"
  _msg_info "               User email:   $(_get "user" "email")"
  _msg_info "            User password:   $(_get "user" "password")"
  _msg_info "              SMTP server:   $(_get "smtp" "server")"
  _msg_info "                SMTP port:   $(_get "smtp" "port")"
  _msg_info "            Email subject:   $(_get "email" "subject")"
  _msg_info "               Email body:   $(_get "email" "body")"
  _msg_info "     Recipients per email:   $(_get "recipients" "per_email")"
  _msg_info "               Recipients:   "
  _display_flags                          "${_recipients[*]}"
}

# Show help usage, with an exit status.
# $1: exit status number.
_usage() {
  local \
    _usage_text
  IFS='' \
    read \
      -r \
      -d '' \
      _usage_text << \
        ENDUSAGETEXT || true

Bulk send emails.

Usage:
  $(_get "app" "name")
    [options]
    [recipients]
  options:
     -e <email>                User email.
                               Default: $(_get "user" "email")
     -k <password>             User password
                               Default: $(_get "user" "password")
     -H <smtp_server>          SMTP server
                               Default: $(_get "smtp" "server")
     -P <smtp_port>            SMTP port
                               Default: $(_get "smtp" "port")
     -s <subject>              Email subject
                               Default: $(_get "email" "subject")
     -b <body>                 Email body
                               Default: $(_get "email" "body")
     -n <recipients_per_email> Recipients per email
                               Default: $(_get "recipients" "per_email")
     -h                        This message.
     -v                        Enable verbose output
ENDUSAGETEXT
  _printf \
    '%s\n' \
    "${_usage_text}"
  exit \
    "${1}"
}

_globals
_global_variables
_requirements
# shellcheck disable=SC2004
# shellcheck disable=SC2034
while \
  getopts \
    'e:k:H:P:s:b:n:cvh?' \
    arg; do
  case \
    "${arg}" in
    e) override_user_email="${OPTARG}" ;;
    k) override_user_password="${OPTARG}" ;;
    H) override_smtp_server="${OPTARG}" ;;
    P) override_smtp_port="${OPTARG}" ;;
    s) override_email_subject="${OPTARG}" ;;
    b) override_email_body="${OPTARG}" ;;
    n) override_recipients_per_email="${OPTARG}" ;;
    c) override_color="y" ;;
    v) override_quiet="n" ;;
    h|?) _set_overrides && \
	 _usage \
           0 ;;
    *)
    _msg_error \
      "Invalid argument '${arg}'" \
      0 && \
    _set_overrides && \
    _usage \
      1
    ;;
  esac
done
shift \
  $(( \
    OPTIND - 1 \
  ))
(( "$#" < 1 )) && \
  _msg_error \
    "No recipients given." \
    1
email_recipients=(
  "$@"
)
_set_overrides
app_opts=(
  "$(_get \
       "user" \
       "email")"
  "$(_get \
       "user" \
       "password")"
  "$(_get \
       "smtp" \
       "server")"
  "$(_get \
       "smtp" \
       "port")"
  "$(_get \
       "email" \
       "subject")"
  "$(_get \
       "email" \
       "body")"
  "$(_get \
       "recipients" \
       "per_email")"
  "${email_recipients[@]}"
)
_show_config
_email_bulk_sender \
  "${app_opts[@]}"

# vim:set sw=2 sts=-1 et:
